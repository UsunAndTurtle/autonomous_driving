#!/usr/bin/env python3

import rospy
import actionlib
import cv2
import numpy as np
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from actionlib_msgs.msg import GoalStatus
from geometry_msgs.msg import Twist
from tf.transformations import euler_from_quaternion
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import cv2.aruco as aruco
import os


class MoveBaseSeq:
    def __init__(self):
        rospy.init_node("move_base_sequence")
        self.goal_cnt = 0
        self.fixed_goals = [(0.0, 0.0), (1.2, -0.6), (1.2, 0.4), (1.2, 1.2)]
        self.client = actionlib.SimpleActionClient("move_base", MoveBaseAction)
        rospy.loginfo("Waiting for move_base action server...")
        wait = self.client.wait_for_server()
        if not wait:
            rospy.logerr("Action server not available!")
            rospy.signal_shutdown("Action server not available!")
            return
        rospy.loginfo("Connected to move base server")
        rospy.loginfo("Starting goals achievements ...")
        self.movebase_client_forever()

    def active_cb(self):
        rospy.loginfo(
            "Goal pose "
            + str(self.goal_cnt + 1)
            + " is now being processed by the Action Server..."
        )

    def feedback_cb(self, feedback):
        rospy.loginfo("Feedback for goal pose " + str(self.goal_cnt + 1) + " received")

    def done_cb(self, status, result):
        if status == 2:
            rospy.loginfo(
                "Goal pose "
                + str(self.goal_cnt)
                + " received a cancel request after it started executing, completed execution!"
            )

        if status == 3:
            rospy.loginfo("Goal pose " + str(self.goal_cnt) + " reached")
            if self.goal_cnt in [1, 2, 3]:  # 0-indexed fixed_goals list
                rospy.loginfo(
                    f"Initiating Aruco docking sequence for goal {self.goal_cnt}..."
                )
                self.aruco_docking(self.goal_cnt)
            else:
                rospy.loginfo("Waiting for next goal selection...")
                self.goal_cnt += (
                    1  # Increment the goal counter if no docking is required
                )
                self.movebase_client_forever()  # Continue with the next goal

        if status == 4:
            rospy.loginfo(
                "Goal pose " + str(self.goal_cnt) + " was aborted by the Action Server"
            )
            rospy.signal_shutdown(
                "Goal pose " + str(self.goal_cnt) + " aborted, shutting down!"
            )
            return

        if status == 5:
            rospy.loginfo(
                "Goal pose "
                + str(self.goal_cnt)
                + " has been rejected by the Action Server"
            )
            rospy.signal_shutdown(
                "Goal pose " + str(self.goal_cnt) + " rejected, shutting down!"
            )
            return

        if status == 8:
            rospy.loginfo(
                "Goal pose "
                + str(self.goal_cnt)
                + " received a cancel request before it started executing, successfully cancelled!"
            )

    def generate_goal(self, x, y):
        generated_goal = MoveBaseGoal()
        generated_goal.target_pose.header.frame_id = "map"
        generated_goal.target_pose.pose.position.x = x
        generated_goal.target_pose.pose.position.y = y
        generated_goal.target_pose.pose.orientation.w = 1
        return generated_goal

    def movebase_client_forever(self):
        while not rospy.is_shutdown():
            print("Select the goal number:")
            print("1: Goal (1.0, 2.0)")
            print("2: Goal (2.0, 3.0)")
            print("3: Goal (3.0, 4.0)")
            print("4: Goal (4.0, 5.0)")
            goal_choice = input("Enter the goal number: ")

            if goal_choice in ["1", "2", "3", "4"]:
                goal_index = int(goal_choice) - 1
                x, y = self.fixed_goals[goal_index]
                goal = self.generate_goal(x, y)
                rospy.loginfo(
                    "Sending goal pose " + str(goal_index + 1) + " to Action Server"
                )
                self.client.send_goal(
                    goal, self.done_cb, self.active_cb, self.feedback_cb
                )
                self.client.wait_for_result()
            else:
                rospy.loginfo(
                    "Invalid selection. Please enter a number between 1 and 4."
                )

    def aruco_docking(self, marker_id):
        aruco_docker = ArucoDocking(marker_id)
        aruco_docker.execute()
        rospy.loginfo(f"Completed Aruco docking sequence for marker {marker_id}")
        self.goal_cnt += 1  # Increment the goal counter after docking
        self.movebase_client_forever()  # Continue with the next goal


class ArucoDocking:
    def __init__(self, marker_id):
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber(
            "/camera/rgb/image_raw", Image, self.process_image
        )
        self.pose_sub = rospy.Subscriber("/odom", Odometry, self.update_pose)
        self.vel_pub = rospy.Publisher("/cmd_vel", Twist, queue_size=10)
        self.aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_4X4_50)
        self.parameters = aruco.DetectorParameters_create()
        self.kp = 0.05
        self.yaw = 0
        self.linear_position_x = 0.0
        self.linear_position_y = 0.0
        self.marker_id = marker_id
        self.marker_images = [
            cv2.imread(
                os.path.abspath(
                    "/home/kimyusun/catkin_ws/src/send_move_base_goals/config/marker_1.png"
                ),
                cv2.IMREAD_GRAYSCALE,
            ),
            cv2.imread(
                os.path.abspath(
                    "/home/kimyusun/catkin_ws/src/send_move_base_goals/config/marker_2.png"
                ),
                cv2.IMREAD_GRAYSCALE,
            ),
            cv2.imread(
                os.path.abspath(
                    "/home/kimyusun/catkin_ws/src/send_move_base_goals/config/marker_3.png"
                ),
                cv2.IMREAD_GRAYSCALE,
            ),
        ]
        if self.marker_images[self.marker_id] is None:
            rospy.logerr(f"Failed to load marker image {self.marker_id + 1}")
        else:
            self.marker_corners, self.marker_ids, _ = aruco.detectMarkers(
                self.marker_images[self.marker_id],
                self.aruco_dict,
                parameters=self.parameters,
            )

    def update_pose(self, msg):
        self.linear_position_x = msg.pose.pose.position.x
        self.linear_position_y = msg.pose.pose.position.y
        orientation_q = msg.pose.pose.orientation
        orientation_list = [
            orientation_q.x,
            orientation_q.y,
            orientation_q.z,
            orientation_q.w,
        ]
        (self.roll, self.pitch, self.yaw) = euler_from_quaternion(orientation_list)

    def process_image(self, data):
        rospy.loginfo("Processing image for Aruco marker...")
        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)
            return

        corners, ids, _ = aruco.detectMarkers(
            cv_image, self.aruco_dict, parameters=self.parameters
        )
        if ids is not None and any(id[0] == self.marker_ids[0][0] for id in ids):
            rospy.loginfo(f"Aruco marker {self.marker_id + 1} detected!")
            self.handle_marker(cv_image, corners, ids)
        else:
            rospy.loginfo("No marker detected. Stopping robot.")
            self.stop_robot()

    def handle_marker(self, image, corners, ids):
        rospy.loginfo("Handling detected Aruco marker...")
        marker_center = np.mean(corners[0][0], axis=0)
        rospy.loginfo(f"Marker center: {marker_center}")
        image_center = np.array([image.shape[1] / 2, image.shape[0] / 2])
        rospy.loginfo(f"Image center: {image_center}")
        angular_z = -self.kp * (marker_center[0] - image_center[0])
        rospy.loginfo(f"Calculated angular z: {angular_z}")
        linear_x = 0.1  # Keep moving forward
        twist_cmd = Twist()
        twist_cmd.angular.z = angular_z
        twist_cmd.linear.x = linear_x
        self.vel_pub.publish(twist_cmd)
        rospy.loginfo("Published velocity command to /cmd_vel")

    def stop_robot(self):
        rospy.loginfo("Stopping the robot...")
        twist_cmd = Twist()
        twist_cmd.angular.z = 0
        twist_cmd.linear.x = 0
        self.vel_pub.publish(twist_cmd)
        rospy.loginfo("Robot stopped.")

    def execute(self):
        rospy.loginfo("Starting Aruco docking sequence...")
        rospy.spin()


if __name__ == "__main__":
    try:
        MoveBaseSeq()
    except rospy.ROSInterruptException:
        rospy.loginfo("Navigation finished.")
